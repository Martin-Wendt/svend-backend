// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SitrepAPI.DbContexts;

#nullable disable
#pragma warning disable

namespace SitrepAPI.Migrations
{
    [DbContext(typeof(SitrepDbContext))]
    [Migration("20220227134949_CasesRelations")]
    partial class CasesRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SitrepAPI.Entities.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("SitrepAPI.Entities.CaseImage", b =>
                {
                    b.Property<int>("CaseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseImageId"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CaseImageId");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseImages");
                });

            modelBuilder.Entity("SitrepAPI.Entities.CaseLog", b =>
                {
                    b.Property<int>("CaseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseLogId"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaseLogId");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseLogs");
                });

            modelBuilder.Entity("SitrepAPI.Entities.TestClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestClass");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Gender = "Gender-1",
                            Name = "FirstName-1"
                        },
                        new
                        {
                            Id = -2,
                            Gender = "Gender-2",
                            Name = "FirstName-2"
                        },
                        new
                        {
                            Id = -3,
                            Gender = "Gender-3",
                            Name = "FirstName-3"
                        },
                        new
                        {
                            Id = -4,
                            Gender = "Gender-4",
                            Name = "FirstName-4"
                        },
                        new
                        {
                            Id = -5,
                            Gender = "Gender-5",
                            Name = "FirstName-5"
                        });
                });

            modelBuilder.Entity("SitrepAPI.Entities.CaseImage", b =>
                {
                    b.HasOne("SitrepAPI.Entities.Case", "Case")
                        .WithMany("Images")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SitrepAPI.Entities.CaseLog", b =>
                {
                    b.HasOne("SitrepAPI.Entities.Case", "Case")
                        .WithMany("CaseLogs")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SitrepAPI.Entities.Case", b =>
                {
                    b.Navigation("CaseLogs");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
